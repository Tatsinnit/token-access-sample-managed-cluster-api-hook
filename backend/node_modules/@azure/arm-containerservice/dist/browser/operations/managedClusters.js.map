{"version":3,"file":"managedClusters.js","sourceRoot":"","sources":["../../../src/operations/managedClusters.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport type { ManagedClusters } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ContainerServiceClient } from \"../containerServiceClient.js\";\nimport type {\n  SimplePollerLike,\n  OperationState} from \"@azure/core-lro\";\nimport {\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  ManagedCluster,\n  ManagedClustersListNextOptionalParams,\n  ManagedClustersListOptionalParams,\n  ManagedClustersListResponse,\n  ManagedClustersListByResourceGroupNextOptionalParams,\n  ManagedClustersListByResourceGroupOptionalParams,\n  ManagedClustersListByResourceGroupResponse,\n  OutboundEnvironmentEndpoint,\n  ManagedClustersListOutboundNetworkDependenciesEndpointsNextOptionalParams,\n  ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,\n  ManagedClustersListOutboundNetworkDependenciesEndpointsResponse,\n  MeshRevisionProfile,\n  ManagedClustersListMeshRevisionProfilesNextOptionalParams,\n  ManagedClustersListMeshRevisionProfilesOptionalParams,\n  ManagedClustersListMeshRevisionProfilesResponse,\n  MeshUpgradeProfile,\n  ManagedClustersListMeshUpgradeProfilesNextOptionalParams,\n  ManagedClustersListMeshUpgradeProfilesOptionalParams,\n  ManagedClustersListMeshUpgradeProfilesResponse,\n  ManagedClustersListKubernetesVersionsOptionalParams,\n  ManagedClustersListKubernetesVersionsResponse,\n  ManagedClustersGetUpgradeProfileOptionalParams,\n  ManagedClustersGetUpgradeProfileResponse,\n  ManagedClustersGetAccessProfileOptionalParams,\n  ManagedClustersGetAccessProfileResponse,\n  ManagedClustersListClusterAdminCredentialsOptionalParams,\n  ManagedClustersListClusterAdminCredentialsResponse,\n  ManagedClustersListClusterUserCredentialsOptionalParams,\n  ManagedClustersListClusterUserCredentialsResponse,\n  ManagedClustersListClusterMonitoringUserCredentialsOptionalParams,\n  ManagedClustersListClusterMonitoringUserCredentialsResponse,\n  ManagedClustersGetOptionalParams,\n  ManagedClustersGetResponse,\n  ManagedClustersCreateOrUpdateOptionalParams,\n  ManagedClustersCreateOrUpdateResponse,\n  TagsObject,\n  ManagedClustersUpdateTagsOptionalParams,\n  ManagedClustersUpdateTagsResponse,\n  ManagedClustersDeleteOptionalParams,\n  ManagedClustersDeleteResponse,\n  ManagedClusterServicePrincipalProfile,\n  ManagedClustersResetServicePrincipalProfileOptionalParams,\n  ManagedClusterAADProfile,\n  ManagedClustersResetAADProfileOptionalParams,\n  ManagedClustersRotateClusterCertificatesOptionalParams,\n  ManagedClustersRotateClusterCertificatesResponse,\n  ManagedClustersAbortLatestOperationOptionalParams,\n  ManagedClustersAbortLatestOperationResponse,\n  ManagedClustersRotateServiceAccountSigningKeysOptionalParams,\n  ManagedClustersRotateServiceAccountSigningKeysResponse,\n  ManagedClustersStopOptionalParams,\n  ManagedClustersStopResponse,\n  ManagedClustersStartOptionalParams,\n  ManagedClustersStartResponse,\n  RunCommandRequest,\n  ManagedClustersRunCommandOptionalParams,\n  ManagedClustersRunCommandResponse,\n  ManagedClustersGetCommandResultOptionalParams,\n  ManagedClustersGetCommandResultResponse,\n  ManagedClustersGetMeshRevisionProfileOptionalParams,\n  ManagedClustersGetMeshRevisionProfileResponse,\n  ManagedClustersGetMeshUpgradeProfileOptionalParams,\n  ManagedClustersGetMeshUpgradeProfileResponse,\n  ManagedClustersListNextResponse,\n  ManagedClustersListByResourceGroupNextResponse,\n  ManagedClustersListOutboundNetworkDependenciesEndpointsNextResponse,\n  ManagedClustersListMeshRevisionProfilesNextResponse,\n  ManagedClustersListMeshUpgradeProfilesNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing ManagedClusters operations. */\nexport class ManagedClustersImpl implements ManagedClusters {\n  private readonly client: ContainerServiceClient;\n\n  /**\n   * Initialize a new instance of the class ManagedClusters class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets a list of managed clusters in the specified subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: ManagedClustersListOptionalParams,\n  ): PagedAsyncIterableIterator<ManagedCluster> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: ManagedClustersListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ManagedCluster[]> {\n    let result: ManagedClustersListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: ManagedClustersListOptionalParams,\n  ): AsyncIterableIterator<ManagedCluster> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists managed clusters in the specified subscription and resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: ManagedClustersListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<ManagedCluster> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: ManagedClustersListByResourceGroupOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ManagedCluster[]> {\n    let result: ManagedClustersListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: ManagedClustersListByResourceGroupOptionalParams,\n  ): AsyncIterableIterator<ManagedCluster> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of egress endpoints (network endpoints of all outbound dependencies) in the specified\n   * managed cluster. The operation returns properties of each egress endpoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  public listOutboundNetworkDependenciesEndpoints(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,\n  ): PagedAsyncIterableIterator<OutboundEnvironmentEndpoint> {\n    const iter = this.listOutboundNetworkDependenciesEndpointsPagingAll(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listOutboundNetworkDependenciesEndpointsPagingPage(\n          resourceGroupName,\n          resourceName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listOutboundNetworkDependenciesEndpointsPagingPage(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<OutboundEnvironmentEndpoint[]> {\n    let result: ManagedClustersListOutboundNetworkDependenciesEndpointsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listOutboundNetworkDependenciesEndpoints(\n        resourceGroupName,\n        resourceName,\n        options,\n      );\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listOutboundNetworkDependenciesEndpointsNext(\n        resourceGroupName,\n        resourceName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listOutboundNetworkDependenciesEndpointsPagingAll(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,\n  ): AsyncIterableIterator<OutboundEnvironmentEndpoint> {\n    for await (const page of this.listOutboundNetworkDependenciesEndpointsPagingPage(\n      resourceGroupName,\n      resourceName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Contains extra metadata on each revision, including supported revisions, cluster compatibility and\n   * available upgrades\n   * @param location The name of the Azure region.\n   * @param options The options parameters.\n   */\n  public listMeshRevisionProfiles(\n    location: string,\n    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,\n  ): PagedAsyncIterableIterator<MeshRevisionProfile> {\n    const iter = this.listMeshRevisionProfilesPagingAll(location, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMeshRevisionProfilesPagingPage(\n          location,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listMeshRevisionProfilesPagingPage(\n    location: string,\n    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<MeshRevisionProfile[]> {\n    let result: ManagedClustersListMeshRevisionProfilesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listMeshRevisionProfiles(location, options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listMeshRevisionProfilesNext(\n        location,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listMeshRevisionProfilesPagingAll(\n    location: string,\n    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,\n  ): AsyncIterableIterator<MeshRevisionProfile> {\n    for await (const page of this.listMeshRevisionProfilesPagingPage(\n      location,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists available upgrades for all service meshes in a specific cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  public listMeshUpgradeProfiles(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,\n  ): PagedAsyncIterableIterator<MeshUpgradeProfile> {\n    const iter = this.listMeshUpgradeProfilesPagingAll(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listMeshUpgradeProfilesPagingPage(\n          resourceGroupName,\n          resourceName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listMeshUpgradeProfilesPagingPage(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<MeshUpgradeProfile[]> {\n    let result: ManagedClustersListMeshUpgradeProfilesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listMeshUpgradeProfiles(\n        resourceGroupName,\n        resourceName,\n        options,\n      );\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listMeshUpgradeProfilesNext(\n        resourceGroupName,\n        resourceName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listMeshUpgradeProfilesPagingAll(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,\n  ): AsyncIterableIterator<MeshUpgradeProfile> {\n    for await (const page of this.listMeshUpgradeProfilesPagingPage(\n      resourceGroupName,\n      resourceName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Contains extra metadata on the version, including supported patch versions, capabilities, available\n   * upgrades, and details on preview status of the version\n   * @param location The name of the Azure region.\n   * @param options The options parameters.\n   */\n  listKubernetesVersions(\n    location: string,\n    options?: ManagedClustersListKubernetesVersionsOptionalParams,\n  ): Promise<ManagedClustersListKubernetesVersionsResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      listKubernetesVersionsOperationSpec,\n    );\n  }\n\n  /**\n   * Gets a list of managed clusters in the specified subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: ManagedClustersListOptionalParams,\n  ): Promise<ManagedClustersListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Lists managed clusters in the specified subscription and resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: ManagedClustersListByResourceGroupOptionalParams,\n  ): Promise<ManagedClustersListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec,\n    );\n  }\n\n  /**\n   * Gets the upgrade profile of a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  getUpgradeProfile(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersGetUpgradeProfileOptionalParams,\n  ): Promise<ManagedClustersGetUpgradeProfileResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      getUpgradeProfileOperationSpec,\n    );\n  }\n\n  /**\n   * **WARNING**: This API will be deprecated. Instead use\n   * [ListClusterUserCredentials](https://docs.microsoft.com/rest/api/aks/managedclusters/listclusterusercredentials)\n   * or\n   * [ListClusterAdminCredentials](https://docs.microsoft.com/rest/api/aks/managedclusters/listclusteradmincredentials)\n   * .\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param roleName The name of the role for managed cluster accessProfile resource.\n   * @param options The options parameters.\n   */\n  getAccessProfile(\n    resourceGroupName: string,\n    resourceName: string,\n    roleName: string,\n    options?: ManagedClustersGetAccessProfileOptionalParams,\n  ): Promise<ManagedClustersGetAccessProfileResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, roleName, options },\n      getAccessProfileOperationSpec,\n    );\n  }\n\n  /**\n   * Lists the admin credentials of a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  listClusterAdminCredentials(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListClusterAdminCredentialsOptionalParams,\n  ): Promise<ManagedClustersListClusterAdminCredentialsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      listClusterAdminCredentialsOperationSpec,\n    );\n  }\n\n  /**\n   * Lists the user credentials of a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  listClusterUserCredentials(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListClusterUserCredentialsOptionalParams,\n  ): Promise<ManagedClustersListClusterUserCredentialsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      listClusterUserCredentialsOperationSpec,\n    );\n  }\n\n  /**\n   * Lists the cluster monitoring user credentials of a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  listClusterMonitoringUserCredentials(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListClusterMonitoringUserCredentialsOptionalParams,\n  ): Promise<ManagedClustersListClusterMonitoringUserCredentialsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      listClusterMonitoringUserCredentialsOperationSpec,\n    );\n  }\n\n  /**\n   * Gets a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersGetOptionalParams,\n  ): Promise<ManagedClustersGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Creates or updates a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters The managed cluster to create or update.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: ManagedCluster,\n    options?: ManagedClustersCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersCreateOrUpdateResponse>,\n      ManagedClustersCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, parameters, options },\n      spec: createOrUpdateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersCreateOrUpdateResponse,\n      OperationState<ManagedClustersCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters The managed cluster to create or update.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: ManagedCluster,\n    options?: ManagedClustersCreateOrUpdateOptionalParams,\n  ): Promise<ManagedClustersCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      resourceName,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates tags on a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.\n   * @param options The options parameters.\n   */\n  async beginUpdateTags(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: TagsObject,\n    options?: ManagedClustersUpdateTagsOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersUpdateTagsResponse>,\n      ManagedClustersUpdateTagsResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersUpdateTagsResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, parameters, options },\n      spec: updateTagsOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersUpdateTagsResponse,\n      OperationState<ManagedClustersUpdateTagsResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates tags on a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.\n   * @param options The options parameters.\n   */\n  async beginUpdateTagsAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: TagsObject,\n    options?: ManagedClustersUpdateTagsOptionalParams,\n  ): Promise<ManagedClustersUpdateTagsResponse> {\n    const poller = await this.beginUpdateTags(\n      resourceGroupName,\n      resourceName,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersDeleteOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersDeleteResponse>,\n      ManagedClustersDeleteResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersDeleteResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, options },\n      spec: deleteOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersDeleteResponse,\n      OperationState<ManagedClustersDeleteResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersDeleteOptionalParams,\n  ): Promise<ManagedClustersDeleteResponse> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * This action cannot be performed on a cluster that is not using a service principal\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters The service principal profile to set on the managed cluster.\n   * @param options The options parameters.\n   */\n  async beginResetServicePrincipalProfile(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: ManagedClusterServicePrincipalProfile,\n    options?: ManagedClustersResetServicePrincipalProfileOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, parameters, options },\n      spec: resetServicePrincipalProfileOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * This action cannot be performed on a cluster that is not using a service principal\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters The service principal profile to set on the managed cluster.\n   * @param options The options parameters.\n   */\n  async beginResetServicePrincipalProfileAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: ManagedClusterServicePrincipalProfile,\n    options?: ManagedClustersResetServicePrincipalProfileOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginResetServicePrincipalProfile(\n      resourceGroupName,\n      resourceName,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * **WARNING**: This API will be deprecated. Please see [AKS-managed Azure Active Directory\n   * integration](https://aka.ms/aks-managed-aad) to update your cluster with AKS-managed Azure AD.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters The AAD profile to set on the Managed Cluster\n   * @param options The options parameters.\n   */\n  async beginResetAADProfile(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: ManagedClusterAADProfile,\n    options?: ManagedClustersResetAADProfileOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, parameters, options },\n      spec: resetAADProfileOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * **WARNING**: This API will be deprecated. Please see [AKS-managed Azure Active Directory\n   * integration](https://aka.ms/aks-managed-aad) to update your cluster with AKS-managed Azure AD.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param parameters The AAD profile to set on the Managed Cluster\n   * @param options The options parameters.\n   */\n  async beginResetAADProfileAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    parameters: ManagedClusterAADProfile,\n    options?: ManagedClustersResetAADProfileOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginResetAADProfile(\n      resourceGroupName,\n      resourceName,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * See [Certificate rotation](https://docs.microsoft.com/azure/aks/certificate-rotation) for more\n   * details about rotating managed cluster certificates.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginRotateClusterCertificates(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersRotateClusterCertificatesOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersRotateClusterCertificatesResponse>,\n      ManagedClustersRotateClusterCertificatesResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersRotateClusterCertificatesResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, options },\n      spec: rotateClusterCertificatesOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersRotateClusterCertificatesResponse,\n      OperationState<ManagedClustersRotateClusterCertificatesResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * See [Certificate rotation](https://docs.microsoft.com/azure/aks/certificate-rotation) for more\n   * details about rotating managed cluster certificates.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginRotateClusterCertificatesAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersRotateClusterCertificatesOptionalParams,\n  ): Promise<ManagedClustersRotateClusterCertificatesResponse> {\n    const poller = await this.beginRotateClusterCertificates(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Aborts the currently running operation on the managed cluster. The Managed Cluster will be moved to\n   * a Canceling state and eventually to a Canceled state when cancellation finishes. If the operation\n   * completes before cancellation can take place, a 409 error code is returned.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginAbortLatestOperation(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersAbortLatestOperationOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersAbortLatestOperationResponse>,\n      ManagedClustersAbortLatestOperationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersAbortLatestOperationResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, options },\n      spec: abortLatestOperationOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersAbortLatestOperationResponse,\n      OperationState<ManagedClustersAbortLatestOperationResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Aborts the currently running operation on the managed cluster. The Managed Cluster will be moved to\n   * a Canceling state and eventually to a Canceled state when cancellation finishes. If the operation\n   * completes before cancellation can take place, a 409 error code is returned.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginAbortLatestOperationAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersAbortLatestOperationOptionalParams,\n  ): Promise<ManagedClustersAbortLatestOperationResponse> {\n    const poller = await this.beginAbortLatestOperation(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Rotates the service account signing keys of a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginRotateServiceAccountSigningKeys(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersRotateServiceAccountSigningKeysOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersRotateServiceAccountSigningKeysResponse>,\n      ManagedClustersRotateServiceAccountSigningKeysResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersRotateServiceAccountSigningKeysResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, options },\n      spec: rotateServiceAccountSigningKeysOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersRotateServiceAccountSigningKeysResponse,\n      OperationState<ManagedClustersRotateServiceAccountSigningKeysResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Rotates the service account signing keys of a managed cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginRotateServiceAccountSigningKeysAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersRotateServiceAccountSigningKeysOptionalParams,\n  ): Promise<ManagedClustersRotateServiceAccountSigningKeysResponse> {\n    const poller = await this.beginRotateServiceAccountSigningKeys(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * This can only be performed on Azure Virtual Machine Scale set backed clusters. Stopping a cluster\n   * stops the control plane and agent nodes entirely, while maintaining all object and cluster state. A\n   * cluster does not accrue charges while it is stopped. See [stopping a\n   * cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details about stopping a\n   * cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginStop(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersStopOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersStopResponse>,\n      ManagedClustersStopResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersStopResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, options },\n      spec: stopOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersStopResponse,\n      OperationState<ManagedClustersStopResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * This can only be performed on Azure Virtual Machine Scale set backed clusters. Stopping a cluster\n   * stops the control plane and agent nodes entirely, while maintaining all object and cluster state. A\n   * cluster does not accrue charges while it is stopped. See [stopping a\n   * cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details about stopping a\n   * cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginStopAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersStopOptionalParams,\n  ): Promise<ManagedClustersStopResponse> {\n    const poller = await this.beginStop(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * See [starting a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details\n   * about starting a cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginStart(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersStartOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersStartResponse>,\n      ManagedClustersStartResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersStartResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, options },\n      spec: startOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersStartResponse,\n      OperationState<ManagedClustersStartResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * See [starting a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details\n   * about starting a cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  async beginStartAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersStartOptionalParams,\n  ): Promise<ManagedClustersStartResponse> {\n    const poller = await this.beginStart(\n      resourceGroupName,\n      resourceName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * AKS will create a pod to run the command. This is primarily useful for private clusters. For more\n   * information see [AKS Run\n   * Command](https://docs.microsoft.com/azure/aks/private-clusters#aks-run-command-preview).\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param requestPayload The run command request\n   * @param options The options parameters.\n   */\n  async beginRunCommand(\n    resourceGroupName: string,\n    resourceName: string,\n    requestPayload: RunCommandRequest,\n    options?: ManagedClustersRunCommandOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ManagedClustersRunCommandResponse>,\n      ManagedClustersRunCommandResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<ManagedClustersRunCommandResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, resourceName, requestPayload, options },\n      spec: runCommandOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      ManagedClustersRunCommandResponse,\n      OperationState<ManagedClustersRunCommandResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * AKS will create a pod to run the command. This is primarily useful for private clusters. For more\n   * information see [AKS Run\n   * Command](https://docs.microsoft.com/azure/aks/private-clusters#aks-run-command-preview).\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param requestPayload The run command request\n   * @param options The options parameters.\n   */\n  async beginRunCommandAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    requestPayload: RunCommandRequest,\n    options?: ManagedClustersRunCommandOptionalParams,\n  ): Promise<ManagedClustersRunCommandResponse> {\n    const poller = await this.beginRunCommand(\n      resourceGroupName,\n      resourceName,\n      requestPayload,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the results of a command which has been run on the Managed Cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param commandId Id of the command.\n   * @param options The options parameters.\n   */\n  getCommandResult(\n    resourceGroupName: string,\n    resourceName: string,\n    commandId: string,\n    options?: ManagedClustersGetCommandResultOptionalParams,\n  ): Promise<ManagedClustersGetCommandResultResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, commandId, options },\n      getCommandResultOperationSpec,\n    );\n  }\n\n  /**\n   * Gets a list of egress endpoints (network endpoints of all outbound dependencies) in the specified\n   * managed cluster. The operation returns properties of each egress endpoint.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  private _listOutboundNetworkDependenciesEndpoints(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,\n  ): Promise<ManagedClustersListOutboundNetworkDependenciesEndpointsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      listOutboundNetworkDependenciesEndpointsOperationSpec,\n    );\n  }\n\n  /**\n   * Contains extra metadata on each revision, including supported revisions, cluster compatibility and\n   * available upgrades\n   * @param location The name of the Azure region.\n   * @param options The options parameters.\n   */\n  private _listMeshRevisionProfiles(\n    location: string,\n    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,\n  ): Promise<ManagedClustersListMeshRevisionProfilesResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      listMeshRevisionProfilesOperationSpec,\n    );\n  }\n\n  /**\n   * Contains extra metadata on the revision, including supported revisions, cluster compatibility and\n   * available upgrades\n   * @param location The name of the Azure region.\n   * @param mode The mode of the mesh.\n   * @param options The options parameters.\n   */\n  getMeshRevisionProfile(\n    location: string,\n    mode: string,\n    options?: ManagedClustersGetMeshRevisionProfileOptionalParams,\n  ): Promise<ManagedClustersGetMeshRevisionProfileResponse> {\n    return this.client.sendOperationRequest(\n      { location, mode, options },\n      getMeshRevisionProfileOperationSpec,\n    );\n  }\n\n  /**\n   * Lists available upgrades for all service meshes in a specific cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param options The options parameters.\n   */\n  private _listMeshUpgradeProfiles(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,\n  ): Promise<ManagedClustersListMeshUpgradeProfilesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      listMeshUpgradeProfilesOperationSpec,\n    );\n  }\n\n  /**\n   * Gets available upgrades for a service mesh in a cluster.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param mode The mode of the mesh.\n   * @param options The options parameters.\n   */\n  getMeshUpgradeProfile(\n    resourceGroupName: string,\n    resourceName: string,\n    mode: string,\n    options?: ManagedClustersGetMeshUpgradeProfileOptionalParams,\n  ): Promise<ManagedClustersGetMeshUpgradeProfileResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, mode, options },\n      getMeshUpgradeProfileOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: ManagedClustersListNextOptionalParams,\n  ): Promise<ManagedClustersListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: ManagedClustersListByResourceGroupNextOptionalParams,\n  ): Promise<ManagedClustersListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListOutboundNetworkDependenciesEndpointsNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListOutboundNetworkDependenciesEndpoints method.\n   * @param options The options parameters.\n   */\n  private _listOutboundNetworkDependenciesEndpointsNext(\n    resourceGroupName: string,\n    resourceName: string,\n    nextLink: string,\n    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsNextOptionalParams,\n  ): Promise<ManagedClustersListOutboundNetworkDependenciesEndpointsNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, nextLink, options },\n      listOutboundNetworkDependenciesEndpointsNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListMeshRevisionProfilesNext\n   * @param location The name of the Azure region.\n   * @param nextLink The nextLink from the previous successful call to the ListMeshRevisionProfiles\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listMeshRevisionProfilesNext(\n    location: string,\n    nextLink: string,\n    options?: ManagedClustersListMeshRevisionProfilesNextOptionalParams,\n  ): Promise<ManagedClustersListMeshRevisionProfilesNextResponse> {\n    return this.client.sendOperationRequest(\n      { location, nextLink, options },\n      listMeshRevisionProfilesNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListMeshUpgradeProfilesNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the managed cluster resource.\n   * @param nextLink The nextLink from the previous successful call to the ListMeshUpgradeProfiles\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listMeshUpgradeProfilesNext(\n    resourceGroupName: string,\n    resourceName: string,\n    nextLink: string,\n    options?: ManagedClustersListMeshUpgradeProfilesNextOptionalParams,\n  ): Promise<ManagedClustersListMeshUpgradeProfilesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, nextLink, options },\n      listMeshUpgradeProfilesNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listKubernetesVersionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/kubernetesVersions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KubernetesVersionListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/managedClusters\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedClusterListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedClusterListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getUpgradeProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/upgradeProfiles/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedClusterUpgradeProfile,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccessProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/accessProfiles/{roleName}/listCredential\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedClusterAccessProfile,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n    Parameters.roleName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listClusterAdminCredentialsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterAdminCredential\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CredentialResults,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.serverFqdn],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listClusterUserCredentialsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterUserCredential\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CredentialResults,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.serverFqdn,\n    Parameters.format,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listClusterMonitoringUserCredentialsOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterMonitoringUserCredential\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CredentialResults,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    queryParameters: [Parameters.apiVersion, Parameters.serverFqdn],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.resourceName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    201: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    202: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    204: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst updateTagsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    201: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    202: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    204: {\n      bodyMapper: Mappers.ManagedCluster,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType,\n    Parameters.ifMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ManagedClustersDeleteHeaders,\n    },\n    201: {\n      headersMapper: Mappers.ManagedClustersDeleteHeaders,\n    },\n    202: {\n      headersMapper: Mappers.ManagedClustersDeleteHeaders,\n    },\n    204: {\n      headersMapper: Mappers.ManagedClustersDeleteHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.ifMatch],\n  serializer,\n};\nconst resetServicePrincipalProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/resetServicePrincipalProfile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst resetAADProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/resetAADProfile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters3,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst rotateClusterCertificatesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/rotateClusterCertificates\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,\n    },\n    201: {\n      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,\n    },\n    202: {\n      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,\n    },\n    204: {\n      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst abortLatestOperationOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedclusters/{resourceName}/abort\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,\n    },\n    201: {\n      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,\n    },\n    202: {\n      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,\n    },\n    204: {\n      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst rotateServiceAccountSigningKeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/rotateServiceAccountSigningKeys\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper:\n        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,\n    },\n    201: {\n      headersMapper:\n        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,\n    },\n    202: {\n      headersMapper:\n        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,\n    },\n    204: {\n      headersMapper:\n        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst stopOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/stop\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ManagedClustersStopHeaders,\n    },\n    201: {\n      headersMapper: Mappers.ManagedClustersStopHeaders,\n    },\n    202: {\n      headersMapper: Mappers.ManagedClustersStopHeaders,\n    },\n    204: {\n      headersMapper: Mappers.ManagedClustersStopHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst startOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/start\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ManagedClustersStartHeaders,\n    },\n    201: {\n      headersMapper: Mappers.ManagedClustersStartHeaders,\n    },\n    202: {\n      headersMapper: Mappers.ManagedClustersStartHeaders,\n    },\n    204: {\n      headersMapper: Mappers.ManagedClustersStartHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst runCommandOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/runCommand\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunCommandResult,\n    },\n    201: {\n      bodyMapper: Mappers.RunCommandResult,\n    },\n    202: {\n      bodyMapper: Mappers.RunCommandResult,\n    },\n    204: {\n      bodyMapper: Mappers.RunCommandResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.requestPayload,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCommandResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/commandResults/{commandId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunCommandResult,\n    },\n    202: {\n      headersMapper: Mappers.ManagedClustersGetCommandResultHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n    Parameters.commandId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOutboundNetworkDependenciesEndpointsOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/outboundNetworkDependenciesEndpoints\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OutboundEnvironmentEndpointCollection,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.resourceName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listMeshRevisionProfilesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/meshRevisionProfiles\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MeshRevisionProfileList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMeshRevisionProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/meshRevisionProfiles/{mode}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MeshRevisionProfile,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location,\n    Parameters.mode,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listMeshUpgradeProfilesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/meshUpgradeProfiles\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MeshUpgradeProfileList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMeshUpgradeProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/meshUpgradeProfiles/{mode}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MeshUpgradeProfile,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n    Parameters.mode,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedClusterListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ManagedClusterListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOutboundNetworkDependenciesEndpointsNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OutboundEnvironmentEndpointCollection,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.resourceName,\n      Parameters.nextLink,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listMeshRevisionProfilesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MeshRevisionProfileList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listMeshUpgradeProfilesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MeshUpgradeProfileList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}