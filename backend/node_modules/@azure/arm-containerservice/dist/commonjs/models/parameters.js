"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.machineName = exports.trustedAccessRoleBinding = exports.trustedAccessRoleBindingName = exports.parameters8 = exports.parameters7 = exports.parameters6 = exports.privateEndpointConnectionName = exports.machines = exports.ignorePodDisruptionBudget = exports.parameters5 = exports.agentPoolName = exports.parameters4 = exports.configName = exports.nextLink = exports.mode = exports.commandId = exports.requestPayload = exports.parameters3 = exports.parameters2 = exports.parameters1 = exports.ifNoneMatch = exports.ifMatch = exports.parameters = exports.contentType = exports.format = exports.serverFqdn = exports.roleName = exports.resourceName = exports.resourceGroupName = exports.location = exports.subscriptionId = exports.apiVersion = exports.$host = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2025-02-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid",
        },
    },
};
exports.location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]$|^[a-zA-Z0-9][-_a-zA-Z0-9]{0,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 1,
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.roleName = {
    parameterPath: "roleName",
    mapper: {
        serializedName: "roleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.serverFqdn = {
    parameterPath: ["options", "serverFqdn"],
    mapper: {
        serializedName: "server-fqdn",
        type: {
            name: "String",
        },
    },
};
exports.format = {
    parameterPath: ["options", "format"],
    mapper: {
        serializedName: "format",
        type: {
            name: "String",
        },
    },
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ManagedCluster,
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
exports.ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String",
        },
    },
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TagsObject,
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ManagedClusterServicePrincipalProfile,
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ManagedClusterAADProfile,
};
exports.requestPayload = {
    parameterPath: "requestPayload",
    mapper: mappers_js_1.RunCommandRequest,
};
exports.commandId = {
    parameterPath: "commandId",
    mapper: {
        serializedName: "commandId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.mode = {
    parameterPath: "mode",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]$|^[a-zA-Z0-9][-_a-zA-Z0-9]{0,61}[a-zA-Z0-9]$"),
            MaxLength: 24,
            MinLength: 1,
        },
        serializedName: "mode",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.configName = {
    parameterPath: "configName",
    mapper: {
        serializedName: "configName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters4 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.MaintenanceConfiguration,
};
exports.agentPoolName = {
    parameterPath: "agentPoolName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]{0,11}$"),
            MaxLength: 12,
            MinLength: 1,
        },
        serializedName: "agentPoolName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.AgentPool,
};
exports.ignorePodDisruptionBudget = {
    parameterPath: ["options", "ignorePodDisruptionBudget"],
    mapper: {
        serializedName: "ignore-pod-disruption-budget",
        type: {
            name: "Boolean",
        },
    },
};
exports.machines = {
    parameterPath: "machines",
    mapper: mappers_js_1.AgentPoolDeleteMachinesParameter,
};
exports.privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateEndpointConnection,
};
exports.parameters7 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateLinkResource,
};
exports.parameters8 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Snapshot,
};
exports.trustedAccessRoleBindingName = {
    parameterPath: "trustedAccessRoleBindingName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([A-Za-z0-9-])+$"),
            MaxLength: 24,
            MinLength: 1,
        },
        serializedName: "trustedAccessRoleBindingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.trustedAccessRoleBinding = {
    parameterPath: "trustedAccessRoleBinding",
    mapper: mappers_js_1.TrustedAccessRoleBinding,
};
exports.machineName = {
    parameterPath: "machineName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][-_a-zA-Z0-9]{0,39}$"),
        },
        serializedName: "machineName",
        required: true,
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map