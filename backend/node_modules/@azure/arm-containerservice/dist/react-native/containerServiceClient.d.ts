import * as coreClient from "@azure/core-client";
import type * as coreAuth from "@azure/core-auth";
import type { Operations, ManagedClusters, MaintenanceConfigurations, AgentPools, PrivateEndpointConnections, PrivateLinkResources, ResolvePrivateLinkServiceId, Snapshots, TrustedAccessRoleBindings, TrustedAccessRoles, Machines } from "./operationsInterfaces/index.js";
import type { ContainerServiceClientOptionalParams } from "./models/index.js";
export declare class ContainerServiceClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ContainerServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ContainerServiceClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    managedClusters: ManagedClusters;
    maintenanceConfigurations: MaintenanceConfigurations;
    agentPools: AgentPools;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    resolvePrivateLinkServiceId: ResolvePrivateLinkServiceId;
    snapshots: Snapshots;
    trustedAccessRoleBindings: TrustedAccessRoleBindings;
    trustedAccessRoles: TrustedAccessRoles;
    machines: Machines;
}
//# sourceMappingURL=containerServiceClient.d.ts.map